seq(as.Date('1976/1/1'), as.Date('2005/12/31'), by = 'day') %>% unique %>% length
solar_full$date %>% unique %>% length
head(solar_full)
solar_full1 = solar_full %>% mutate(day = day(date), month = month(date))
as.Date('1976/1/1') %>% day
as.Date('1976/1/1') %>% month
Sys.Date()
Sys.Date() %>% month
Sys.Date() %>% year
Sys.Date() %>% days_in_year
Sys.Date() %>% yday
Sys.Date() %>% mday
Sys.Date(-3) %>% mday
solar_full1 = solar_full %>% mutate(day = mday(date), month = month(date))
head(solar_full1)
solar_full1$month %>% unique
solar_full1$day %>% unique
month(Sys.Date())
?month
Sys.Date() %>% mday
Sys.Date() %>% wday
Sys.Date() %>% yday
solar_model = solar_full1 %>% group_by(station, month, day, time) %>%
summarise(avg_ghi = mean(ghi))
length(unique(solar_full1$station))
solar_model = solar_full1 %>% group_by(station, month, day, time) %>%
summarise(avg_ghi = mean(ghi))
test <- solar_full1[sample(1000:100000, 10000),]
test %>% group_by(., station) %>% head(.)
test %>% group_by(., station) %>% summarise(., n()) %>% head(.)
test %>% group_by(., station, month) %>% summarise(., n()) %>% head(.)
test %>% group_by(., station, month, day) %>% summarise(., n()) %>% head(.)
test %>% group_by(., station, month, day, time) %>% summarise(., n()) %>% head(.)
test %>% group_by(., station, month, day, time) %>% summarise(., n=n()) %>% head(.) %>%
arrange(.,-n)
test %>% group_by(., station, month, day, time) %>% summarise(., n=n()) %>% head(.) %>%
arrange(.,n)
1020*12*31*24
head(solar_full1)
solar_full1 %>% filter(State == "NY", month == 4)
solar_full1 %>% filter(State == "NY") %>% select(date) %>% year %>% unique
solar_full1 %>% filter(State == "NY") %>% select(date) %>% year
solar_full1 %>% filter(State == "NY") %>% select(date) %>% unique
solar_full1 %>% filter(State == "NY") %>% select(date) %>% year()
solar_full1 %>% filter(State == "NY") %>% select(date) %>%  class
solar_full1$date[solar_full1$State == 'NY'] %>% year %>% unique
solar_full1$date[solar_full1$State == 'NY'] %>% year %>% unique %>% sort()
solar_full1$date[solar_full1$State == 'TX'] %>% year %>% unique %>% sort()
solar_full1$date[solar_full1$State == 'CA'] %>% year %>% unique %>% sort()
solar_model = solar_full1 %>% group_by(State, month, day, time) %>%
summarise(avg_ghi = mean(ghi))
test_plot = solar_test3 %>% filter(state == 'IA') %>%
ggplot(aes(x=time, y=avg_ghi)) + geom_bar(stat='identity') + facet_wrap(~month)
test_plot
test_plot = solar_test3 %>% filter(state == 'IA') %>%
ggplot(aes(x=time, y=avg_ghi)) + geom_bar(stat='identity') + facet_wrap(~month)
test_plot = solar_model %>% filter(state == 'IA') %>%
ggplot(aes(x=time, y=avg_ghi)) + geom_bar(stat='identity') + facet_wrap(~month)
test_plot = solar_model %>% filter(State == 'IA') %>%
ggplot(aes(x=time, y=avg_ghi)) + geom_bar(stat='identity') + facet_wrap(~month)
test_plot
test_plot = solar_model %>% filter(State == 'IA'& month == 6) %>%
ggplot(aes(x=time, y=avg_ghi)) + geom_bar(stat='identity')
test_plot
20000*0.16
test_plot = solar_model %>% filter(State == 'IA'& month == 1) %>%
ggplot(aes(x=time, y=avg_ghi)) + geom_bar(stat='identity')
test_plot
write.csv(x = solar_model, file = 'solar_model.csv')
getwd()
runApp('shiny_proj/project1_Ilyas')
solar_model1 <- fread('solar_model.csv')
test_map <-  leaflet(solar_model)
View(solar_model1)
solar_meta <-  fread('/Users/ilyasshomayev/datasets/tmy3-solar/TMY3_StationsMeta.csv')
solar_meta = solar_meta %>% select(1,3,4,5)
solar_data <- fread('/Users/ilyasshomayev/datasets/tmy3-solar/tmy3.csv')
colnames(solar_data)
solar_data = solar_data %>% select(c(1,2,5,69))
colnames(solar_data) = c('date', 'time', 'ghi', 'station')
solar_data$date = as.Date(solar_data$date, format ='%m/%d/%Y')
solar_data$time = as.numeric(substr(solar_data1time, 1,2))
class(solar_data$date)
class(solar_data$time)
anyNA(solar_data$ghi)
solar_data$ghi %>% is.na %>% sum
solar_data %>% filter(is.na(ghi))
solar_data %>% filter(ghi == 0) %>% nrow
sdf
solar_data %>% filter(ghi == 0) %>% nrow
solar_data %>% filter(ghi == 0) %>% nrow
solar_data$ghi[is.na(solar_data$ghi)] = 0
solar_data %>% filter(ghi == 0) %>% nrow
seq(as.Date('1976/1/1'), as.Date('2005/12/31'), by = 'day') %>% unique %>% length
solar_full$date %>% unique %>% length
seq(as.Date('1976/1/1'), as.Date('2005/12/31'), by = 'day') %>% unique %>% length
solar_data$date %>% unique %>% length
solar_data = left_join(solar_data, solar_meta, by = c('station' = 'USAF'))
solar_data = solar_data %>% mutate(day = mday(date), month = month(date))
solar_data = solar_data %>% group_by(State, month, day, time) %>%
summarise(avg_ghi = mean(ghi))
test_map <-  leaflet(solar_data)
test_plot = solar_data %>% filter(State == 'IA'& month == 1) %>%
ggplot(aes(x=time, y=avg_ghi)) + geom_bar(stat='identity')
test_plot
head(solar_data)
\
states_map <- map("state", fill = TRUE, plot = FALSE)
solar_data$State %>% unique
leaflet_solar <- leaflet(solar_meta) %>%
addTiles() %>%
addCircleMarkers(~Longitude , ~Latitude, radius = 1)
leaflet_solar
View(solar_data)
View(solar_meta)
test_map <-  leaflet(solar_data) %>% addTiles(data = states_map,
fillColor = heat.colors(50, alpha = 1))
test_map <-  leaflet(solar_data) %>% addTiles() %>% addTiles(data = states_map,
fillColor = heat.colors(50, alpha = 1))
solar_data = left_join(solar_data, solar_meta, by = c('State' = 'State'))
View(solar_data)
test_map <-  leaflet(solar_data) %>% addTiles() %>% addTiles(data = states_map,
fillColor = heat.colors(50, alpha = 1))
solar_data <- fread('/Users/ilyasshomayev/datasets/tmy3-solar/tmy3.csv')
colnames(solar_data)
solar_data = solar_data %>% select(c(1,2,5,69))
colnames(solar_data) = c('date', 'time', 'ghi', 'station')
solar_data$date = as.Date(solar_data$date, format ='%m/%d/%Y')
solar_data$time = as.numeric(substr(solar_data1time, 1,2))
class(solar_data$date)
class(solar_data$time)
solar_data$ghi %>% is.na %>% sum
solar_data %>% filter(is.na(ghi))
solar_data %>% filter(ghi == 0) %>% nrow
solar_data$ghi[is.na(solar_data$ghi)] = 0
solar_data %>% filter(ghi == 0) %>% nrow
solar_data = left_join(solar_data, solar_meta, by = c('station' = 'USAF'))
solar_data = solar_data %>% mutate(day = mday(date), month = month(date))
solar_data = solar_data %>% group_by(State, month, day, time) %>%
summarise(avg_ghi = mean(ghi))
print(c(1,2,3, NA))
Sys.Date()
test_map <-  leaflet(solar_data) %>% addTiles() %>% addTiles(data = states_map,
fillColor = heat.colors(50, alpha = 1))
heat.colors(50, alpha = 1)
test_map <-  leaflet(solar_data) %>% addTiles() %>% addTiles(data = states_map,
fillColor = heat.colors(53, alpha = 1))
test_map <-   addTiles() %>% addTiles(data = states_map,
fillColor = heat.colors(53, alpha = 1))
head(solar_data)
test_map <-  leaflet(states_map) %>% addTiles()
test_map <-  leaflet(states_map) %>% addTiles()
test_map
test_map <-  leaflet(states_map) %>% addTiles() %>% addTiles(data = states_map,
fillColor = heat.colors(53, alpha = 1))
test_map
test_map <-  leaflet(states_map) %>% addTiles() %>% addTiles(data = states_map,
fillColor = heat.colors(63, alpha = 1))
test_map
states_map <- map("state", fill = FALSE, plot = FALSE)
test_map <-  leaflet(states_map) %>% addTiles() %>% addTiles(data = states_map,
fillColor = heat.colors(63, alpha = 1))
test_map
colStates <- map("state")
colStates <- map("state", fill =TRUE)
head(Andrew)
leaflet() %>% addPolygons(data = colStates)
colStates <- map("state", fill = T)
leaflet() %>% addPolygons(data = colStates)
leaflet() %>% addPolygons(data = colStates, stroke=F)
leaflet() %>% addPolygons(data = colStates, heat.colors(50,alpha=1), stroke=F)
leaflet() %>% addPolygons(data = colStates, fillColor=heat.colors(50,alpha=1), stroke=F)
leaflet() %>% addPolygons(data = colStates, fillColor=heat.colors(53,alpha=1), stroke=F)
leaflet() %>% addPolygons(data = colStates, fillColor=heat.colors(63,alpha=1), stroke=F)
leaflet() %>% addPolygons(data = colStates, fillColor=heat.colors(5,alpha=1), stroke=F)
leaflet() %>% addTiles()%>% addPolygons(data = colStates, fillColor=heat.colors(5,alpha=1), stroke=F)
colStates$names
plot(density(heights), main = "Sample Distribution of Heights")
set.seed(0)
heights = rnorm(n = 100, mean = 70, sd = 1) #Randomly generating 100 normally
plot(density(heights), main = "Sample Distribution of Heights")
abline(v = 70, lwd = 2, lty = 2)
abline(v = 68, lwd = 2, lty = 2, col = "red")
legend("topright", c("True Mean = 70", "H0 Mean = 68"), lwd = 2,
lty = 2, col = c("black", "red"))
boxplot(heights, main = "Sample Distribution of Heights")
abline(h = 70, lwd = 2, lty = 2)
abline(h = 68, lwd = 2, lty = 2, col = "red")
legend("topright", c("True Mean = 70", "H0 Mean = 68"), lwd = 2,
lty = 2, col = c("black", "red"))
t.statistic = (mean(heights) - 68)/(sd(heights)/sqrt(100)) #Manually calculating
t.statistic                                                #the t-statistic
pt(q = t.statistic, df = 99, lower.tail = FALSE) #P-value is extremely small;
t.test(heights, mu = 68, alternative = "greater") #Same test, using the t.test()
set.seed(0)
SAT.Spring = rnorm(100, 1550, 200) #Randomly generating 100 normally distributed
SAT.Fall = rnorm(80, 1500, 210) #Randomly generating 80 normally distributed
plot(density(SAT.Spring), xlab = "SAT Score",
main = "Sample Distribution of SAT Scores", col = "red")
lines(density(SAT.Fall), col = "blue")
legend("topright", c("Spring", "Fall"), lwd = 1, col = c("red", "blue"))
boxplot(SAT.Spring, SAT.Fall, main = "Sample Distribution of SAT Scores",
col = c("red", "blue"), names = c("Spring", "Fall"))
t.statistic = (mean(SAT.Spring) - mean(SAT.Fall))/sqrt(var(SAT.Spring)/100 + var(SAT.Fall)/80)
t.statistic
t.test(SAT.Spring, SAT.Fall, alternative = "two.sided") #Conducting the t-test for two
f.statistic = var(SAT.Fall)/var(SAT.Spring) #Manually calculating the F-statistic.
f.statistic
var.test(SAT.Fall, SAT.Spring, alternative = "two.sided") #Conducting the F-test to
set.seed(0)
Low.Calorie = rnorm(200, 10, 1) #Randomly generating weight loss measurements
Low.Carb = rnorm(200, 8.5, 1)   #for various diet types.
Low.Fat = rnorm(200, 8, 1)
Control = rnorm(200, 0, 1)
Weight.Loss = c(Low.Calorie, Low.Carb, Low.Fat, Control) #Combining data into
Category = c(rep("Low Calorie", 200),                    #different consolidated
rep("Low Carb", 200),                       #vectors.
rep("Low Fat", 200),
rep("Control", 200))
boxplot(Weight.Loss ~ Category,
col = c("red", "orange", "yellow", "green"),
main = "Distribution of Weight Loss\nfor Various Diets")
summary(aov(Weight.Loss ~ Category)) #Conducting the One-Way ANOVA on the weight
quiz.data = matrix(c(440, 210, 120, 180), nrow = 2, ncol = 2, byrow = TRUE)
dimnames(quiz.data) = list(Attendance = c("Present", "Absent"),
Grade = c("Pass", "Fail"))
mosaicplot(quiz.data, shade = TRUE)
chisq.test(quiz.data) #Conducting the X^2 test of independence data on the quiz
library(datasets) #Load the base R datasets library.
help(chickwts) #See the help documentation for the chickwts dataset to see a
chickwts #Visually inspect the data.
summary(chickwts) #Returns the five-number summary, along with the mean,
sd(chickwts$weight) #Returns the standard deviation of the weight variable.
var(chickwts$weight) #Returns the variance of the weight variable.
table(chickwts) #Returns a contingency table of weight and feed.
plot(density(chickwts$weight), main = "Overall Distribution of Chick Weights")
abline(v = mean(chickwts$weight), lwd = 2, lty = 2)
abline(v = 280, lwd = 2, lty = 2, col = "red")
legend("topright", c("True Mean = 261.3", "H0 Mean = 280"), lwd = 2,
lty = 2, col = c("black", "red"))
boxplot(chickwts$weight, main = "Overall Distribution of Chick Weights")
abline(h = mean(chickwts$weight), lwd = 2, lty = 2)
abline(h = 280, lwd = 2, lty = 2, col = "red")
legend("topright", c("True Mean = 261.3", "H0 Mean = 280"), lwd = 2,
lty = 2, col = c("black", "red"))
t.test(chickwts$weight, mu = 280, alternative = "less")
boxplot(chickwts$weight ~ chickwts$feed,
col = c("red", "orange", "yellow", "green", "blue", "violet"),
main = "Distribution of Chick Weights\nfor Various Feed Types")
summary(aov(chickwts$weight ~ chickwts$feed))
var.test(chickwts$weight[chickwts$feed == "casein"],
chickwts$weight[chickwts$feed == "meatmeal"],
alternative = "two.sided")
install.packages("rsqlite")
install.packages("RSQLite")
temp <- fread('/Users/ilyasshomayev/Desktop/DS Bootcamp /01FoundationsofStatisticsHomework/[01] Temp.txt')
head(temp)
temp <- read.csv('/Users/ilyasshomayev/Desktop/DS Bootcamp /01FoundationsofStatisticsHomework/[01] Temp.txt')
head(temp)
View(temp)
temp <- fread('/Users/ilyasshomayev/Desktop/DS Bootcamp /01FoundationsofStatisticsHomework/[01] Temp.txt',
header =  T)
head(temp)
temp <- fread('/Users/ilyasshomayev/Desktop/DS Bootcamp /01FoundationsofStatisticsHomework/[01] Temp.txt',
header =  TRUE)
head(temp)
temp <- fread('/Users/ilyasshomayev/Desktop/DS Bootcamp /01FoundationsofStatisticsHomework/[01] Temp.txt', header =  TRUE)
temp <- read.table('/Users/ilyasshomayev/Desktop/DS Bootcamp /01FoundationsofStatisticsHomework/[01] Temp.txt', header =  TRUE)
head(temp)
str(temp)
summary(temp)
ggplot(temp, aes(Body.Temp)) + geom_histogram()
ggplot(temp, aes(Body.Temp)) + geom_histogram(bins = 10)
ggplot(temp, aes(Body.Temp)) + geom_histogram(bins = 15)
ggplot(temp, aes(Body.Temp)) + geom_histogram(bins = 20)
ggplot(temp, aes(Body.Temp)) + geom_histogram(bins = 15)
ggplot(temp, aes(Heart.Rate)) + geom_histogram(bins = 15)
ggplot(temp, aes(Heart.Rate)) + geom_histogram(bins = 10)
ggplot(temp, aes(Heart.Rate, Body.Temp)) + geom_point(aes(color = Gender))
ggplot(temp, aes(Heart.Rate, Body.Temp)) + geom_point(aes(color = Gender)) + geom_smooth()
ggplot(temp, aes(Heart.Rate, Body.Temp)) + geom_point(aes(color = Gender)) + geom_smooth(aes(color = Gender))
ggplot(temp, aes(Heart.Rate, Body.Temp)) + geom_point(aes(color = Gender)) +
geom_smooth(aes(color = Gender))
ggplot(temp, aes(Body.Temp)) + geom_boxplot()
ggplot(temp, aes(Heart.Rate, Body.Temp)) _ geom_boxplot()
runApp('Desktop/DS Bootcamp /shiny_demo/shiny_csv')
library(RSQLite)
library(data.table)
csvpath = "/Users/ilyasshomayev/Desktop/DS Bootcamp /shiny_demo/shiny_csv/flights14.csv"
dbname = "./flights.sqlite"
tblname = "flights"
data <- fread(input = csvpath,
sep = ",",
header = TRUE)
conn <- dbConnect(drv = SQLite(),
dbname = dbname)
csvpath = "/Users/ilyasshomayev/Desktop/DS Bootcamp /shiny_demo/shiny_csv/flights14.csv"
dbname = "/Users/ilyasshomayev/Desktop/DS Bootcamp /shiny_demo/shiny_sqlite/flights.sqlite"
tblname = "flights"
conn <- dbConnect(drv = SQLite(),
dbname = dbname)
dbWriteTable(conn = conn,
name = tblname,
value = data)
dbListTables(conn)
dbDisconnect(conn)
install.packages('rsconnect')
library(rsconnect)
/Users/ilyasshomayev/Desktop/DS Bootcamp /shiny_demo/shiny_csv/flights14.csv"
/Users/ilyasshomayev/Desktop/DS Bootcamp /shiny_demo/shiny_csv/flights14.csv"
rsconnect::setAccountInfo(name='shom',
token='3A24DB38504B9B21A843EDC1B9C9A1B2',
secret='I+FWbiOlki/2UX8xi+seSHPrS7r2FNMIBTIvJZAQ')
test_map <-  leaflet(states_map) %>% addTiles() %>% addTiles(data = states_map,
fillColor = heat.colors(63, alpha = 1))
test_map <-  leaflet(states_map)  %>% addTiles(data = states_map,
fillColor = heat.colors(63, alpha = 1))
test_map
states_map <- map("state", fill = FALSE, plot = FALSE)
test_map <-  leaflet(states_map)  %>% addTiles(data = states_map,
fillColor = heat.colors(63, alpha = 1))
test_map
%>% addTiles()
%>% addTiles()
%>% addTiles()
test_map <-  leaflet(states_map) %>% addTiles() %>% addTiles(data = states_map,
fillColor = heat.colors(63, alpha = 1))
test_map
test_map <-  leaflet(states_map) %>% addTiles()
test_map
test_map <-  leaflet(states_map) %>% addTiles() %>% addTiles(data = states_map,
fillColor = heat.colors(63, alpha = 1))
states_map <- map("state", fill = FALSE, plot = FALSE)
test_map <-  leaflet(states_map) %>% addTiles() %>% addTiles(data = states_map,
fillColor = heat.colors(63, alpha = 1))
test_map
colStates <- map("state")
leaflet() %>% addTiles()%>% addPolygons(data = colStates, fillColor=heat.colors(5,alpha=1), stroke=F)
leaflet() %>% addTiles()%>% addPolygons(data = colStates, fillColor=heat.colors(63,alpha=1), stroke=F)
colStates$names
colStates$names
colStates <- map("state")
leaflet() %>% addTiles()%>% addPolygons(data = colStates, fillColor=heat.colors(63,alpha=1), stroke=F)
leaflet() %>% addTiles()%>% addPolygons(data = colStates, fillColor=heat.colors(63,alpha=1), stroke=T)
colStates <- map("state")
leaflet() %>% addTiles()%>% addPolygons(data = colStates,  stroke=T)
states_map <- map("state", fill = FALSE, plot = FALSE)
states_map <- map("state", fill = FALSE, plot = T)
test_map <-  leaflet(states_map) %>% addTiles() %>% addTiles(data = states_map,
fillColor = heat.colors(63, alpha = 1))
test_map <-  leaflet() %>% addTiles() %>% addTiles(data = states_map,
fillColor = heat.colors(63, alpha = 1))
test_map
rm(test_map)
rm(states_map)
states_map <- map("state", fill = FALSE, plot = T)
test_map <-  leaflet() %>% addTiles() %>% addTiles(data = states_map,
fillColor = heat.colors(63, alpha = 1))
test_map <-  leaflet() %>% addTiles() %>% addPolygons(data = states_map,
fillColor = heat.colors(63, alpha =1))
test_map
colStates <- map("state")
leaflet() %>% addTiles()%>% addPolygons(data = colStates,  stroke=T)
states_map <- map("state", fill = T, plot = F)
test_map <-  leaflet() %>% addTiles() %>% addPolygons(data = states_map,
fillColor = heat.colors(63, alpha =1))
test_map
test_map <-  leaflet() %>% addTiles() %>% addPolygons(data = states_map,
fillColor = heat.colors(63, alpha =1),
stroke = F)
test_map
map_data = solar_data %>%
summary(solar_data)
map_data = solar_data %>%
str(solar_data)
map_data = solar_data %>% ungroup()
str(solar_data)
str(map_data)
map_data = solar_data %>% ungroup() %>% group_by(State, month) %>%
summarise(monthly_irradiance = mean(mean_ghi))
warnings()
str(map_data)
map_data = solar_data %>% ungroup() %>% group_by(State, month) %>%
summarise(monthly_irradiance = mean(mean_ghi))
map_data = solar_data %>% ungroup() %>% group_by(State, month) %>%
summarise(monthly_irradiance = mean(avg_ghi))
str(map_data)
map_data$State %>% unique() %>% length()
min(map_data$monthly_irradiance)
max(map_data$monthly_irradiance)
colfunc <- colorRampPalette(c("yellow", "red"))
map_data = solar_data %>% ungroup() %>% group_by(State, month) %>%
summarise(monthly_irradiance = mean(avg_ghi)) %>% mutate(color = colfunc(monthly_irradiance))
colfunc(10)
colfunc(20)
colfunc(53)
map_data = solar_data %>% ungroup() %>% group_by(State, month) %>%
summarise(monthly_irradiance = mean(avg_ghi)) %>% arrange(monthly_irradiance)
View(map_data)
test_map <-  leaflet() %>% addTiles() %>% addPolygons(data = states_map,
fillColor = heat.colors(63, alpha =NULL),
stroke = F)
test_map
states_map
map_data = solar_data %>% ungroup() %>% group_by(State, month) %>%
summarise(monthly_irradiance = mean(avg_ghi))
View(map_data)
states_map <- map("state", fill = T, plot = F)
map("state", fill = T, plot = F)
test1 <- as.data.frame(states_map)
states.abb
states_map$names
states_map$names = state.abb(states_map$names)
state.abb('alabama')
state.abb
statw.names
state.names
states_map$range
states_test <- geojsonio::geojson_read("json/us-states.geojson", what = "sp")
install.packages('geojsonio')
library(geojsonio)
states_test <- geojsonio::geojson_read("json/us-states.geojson", what = "sp")
install.packages('rgdal')
states_test <- geojsonio::geojson_read("json/us-states.geojson", what = "sp")
install.packages('rgdal')
install.packages('jsonlite')
library(jsonlite)
states_test <- geojsonio::geojson_read("json/us-states.geojson", what = "sp")
states_test <- geojson_read("json/us-states.geojson", what = "sp")
states_test <- geojson::geojson_read("json/us-states.geojson", what = "sp")
states_test <- geojsonio::geojson_read("json/us-states.geojson", what = "sp")
install.packages("rgdal")
library("geojsonio", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
states_test <- geojsonio::geojson_read("json/us-states.geojson", what = "sp")
library("geojson", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
library("RJSONIO", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
states_test <- geojsonio::geojson_read("json/us-states.geojson", what = "sp")
install.packages("rgdal")
install.packages("rgdal")
install.packages('rgdal', type = "source", configure.args=c('--with-proj-include=/usr/local/include','--with-proj-lib=/usr/local/lib'))
install.packages("~/datasets/rgdal_1.2-12.tgz", repos = NULL, type = .Platform$pkgType)
install.packages('rgdal',repos="http://www.stats.ox.ac.uk/pub/RWin")
install.packages("rgdal")
install.packages('rgdal', type = "source", configure.args=c('--with-proj-include=/usr/local/include','--with-proj-lib=/usr/local/lib'))
install.packages("rgdal")
install.packages("rgdal", repos="https://cran.rstudio.com/")
install.packages("rgdal")
install.packages("gdal")
install.packages("Rgdal")
install.packages("~/datasets/rgdal_1.2-12.tgz", repos = NULL, type = .Platform$pkgType)
states_test <- geojsonio::geojson_read("json/us-states.geojson", what = "sp")
states_test <- geojsonio::geojson_read("json/us-states.geojson", what = "sp")
sol_colors = colfunc(53)
map_data = solar_data %>% ungroup() %>% group_by(State, month) %>%
summarise(monthly_irradiance = mean(avg_ghi)) %>% arrange(monthly_irradiance)
View(map_data)
map_data = solar_data %>% ungroup() %>% group_by(State, month) %>%
summarise(monthly_irradiance = mean(avg_ghi)) %>%
%>% filter(month == 4) %>% arrange(monthly_irradiance)
map_data = solar_data %>% ungroup() %>% group_by(State, month) %>%
summarise(monthly_irradiance = mean(avg_ghi)) %>%
%>% filter(month == 4) %>% arrange(monthly_irradiance)
map_data = solar_data %>% ungroup() %>% group_by(State, month) %>%
summarise(monthly_irradiance = mean(avg_ghi)) %>%
filter(month == 4) %>% arrange(monthly_irradiance)
map_data$color = sol_colors
states_test <- geojsonio::geojson_read("json/us-states.geojson", what = "sp")
install.packages("json")
states_test <- geojsonio::geojson_read("json/us-states.geojson", what = "sp")
install.packages("geojson")
library("geojson", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
library("geojsonio", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
states_test <- geojsonio::geojson_read("json/us-states.geojson", what = "sp")
states_test <- geojsonio::geojson_read("json/us-states.geojson", what = "sp")
states_test <- geojsonio::geojson_read("json/us-states.geojson", what = "sp")
states_test <- geojsonio::geojson_read("json/us-states.geojson", what = "sp")
test2 <- rgdal::readOGR("json/us-states.geojson", "OGRGeoJSON")
states_test <- geojsonio::geojson_read("json/us-states.geojson", what = "sp")
shiny::runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
pwd
getwd()
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
consumption = fread('consumption_v2.csv')
runApp('git_proj/shiny_project_solar')
consumption <- fread('/Users/ilyasshomayev/Desktop/DS Bootcamp /python/table5_a.csv')
consumption$State = tolower(consumption$State)
consumption = consumption %>% left_join(.,state.fips, by = c('State' = 'polyname') )
consumption$abb[10] = 'NY'
consumption$abb[4] = 'MA'
consumption$abb[15] = 'MI'
consumption$abb[32] = 'NC'
consumption$abb[34] = 'VA'
consumption$abb[58] = 'WA'
consumption$abb[60] = 'AK'
consumption$abb[61] = 'HI'
consumption = consumption[-which(consumption$abb == 'DC'),]
consumption = consumption[!is.na(consumption$abb),]
nrow(consumption)
consumption <- fread('/Users/ilyasshomayev/Desktop/DS Bootcamp /python/consumption.csv')
consumption <- fread('/Users/ilyasshomayev/git_proj/shiny_project_solar/consumption_v2.csv')
View(consumption)
runApp('git_proj/shiny_project_solar')
