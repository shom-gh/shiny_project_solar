fillColor = heat.colors(63, alpha =1),
stroke = F)
test_map
map_data = solar_data %>%
summary(solar_data)
map_data = solar_data %>%
str(solar_data)
map_data = solar_data %>% ungroup()
str(solar_data)
str(map_data)
map_data = solar_data %>% ungroup() %>% group_by(State, month) %>%
summarise(monthly_irradiance = mean(mean_ghi))
warnings()
str(map_data)
map_data = solar_data %>% ungroup() %>% group_by(State, month) %>%
summarise(monthly_irradiance = mean(mean_ghi))
map_data = solar_data %>% ungroup() %>% group_by(State, month) %>%
summarise(monthly_irradiance = mean(avg_ghi))
str(map_data)
map_data$State %>% unique() %>% length()
min(map_data$monthly_irradiance)
max(map_data$monthly_irradiance)
colfunc <- colorRampPalette(c("yellow", "red"))
map_data = solar_data %>% ungroup() %>% group_by(State, month) %>%
summarise(monthly_irradiance = mean(avg_ghi)) %>% mutate(color = colfunc(monthly_irradiance))
colfunc(10)
colfunc(20)
colfunc(53)
map_data = solar_data %>% ungroup() %>% group_by(State, month) %>%
summarise(monthly_irradiance = mean(avg_ghi)) %>% arrange(monthly_irradiance)
View(map_data)
test_map <-  leaflet() %>% addTiles() %>% addPolygons(data = states_map,
fillColor = heat.colors(63, alpha =NULL),
stroke = F)
test_map
states_map
map_data = solar_data %>% ungroup() %>% group_by(State, month) %>%
summarise(monthly_irradiance = mean(avg_ghi))
View(map_data)
states_map <- map("state", fill = T, plot = F)
map("state", fill = T, plot = F)
test1 <- as.data.frame(states_map)
states.abb
states_map$names
states_map$names = state.abb(states_map$names)
state.abb('alabama')
state.abb
statw.names
state.names
states_map$range
states_test <- geojsonio::geojson_read("json/us-states.geojson", what = "sp")
install.packages('geojsonio')
library(geojsonio)
states_test <- geojsonio::geojson_read("json/us-states.geojson", what = "sp")
install.packages('rgdal')
states_test <- geojsonio::geojson_read("json/us-states.geojson", what = "sp")
install.packages('rgdal')
install.packages('jsonlite')
library(jsonlite)
states_test <- geojsonio::geojson_read("json/us-states.geojson", what = "sp")
states_test <- geojson_read("json/us-states.geojson", what = "sp")
states_test <- geojson::geojson_read("json/us-states.geojson", what = "sp")
states_test <- geojsonio::geojson_read("json/us-states.geojson", what = "sp")
install.packages("rgdal")
library("geojsonio", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
states_test <- geojsonio::geojson_read("json/us-states.geojson", what = "sp")
library("geojson", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
library("RJSONIO", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
states_test <- geojsonio::geojson_read("json/us-states.geojson", what = "sp")
install.packages("rgdal")
install.packages("rgdal")
install.packages('rgdal', type = "source", configure.args=c('--with-proj-include=/usr/local/include','--with-proj-lib=/usr/local/lib'))
install.packages("~/datasets/rgdal_1.2-12.tgz", repos = NULL, type = .Platform$pkgType)
install.packages('rgdal',repos="http://www.stats.ox.ac.uk/pub/RWin")
install.packages("rgdal")
install.packages('rgdal', type = "source", configure.args=c('--with-proj-include=/usr/local/include','--with-proj-lib=/usr/local/lib'))
install.packages("rgdal")
install.packages("rgdal", repos="https://cran.rstudio.com/")
install.packages("rgdal")
install.packages("gdal")
install.packages("Rgdal")
install.packages("~/datasets/rgdal_1.2-12.tgz", repos = NULL, type = .Platform$pkgType)
states_test <- geojsonio::geojson_read("json/us-states.geojson", what = "sp")
states_test <- geojsonio::geojson_read("json/us-states.geojson", what = "sp")
sol_colors = colfunc(53)
map_data = solar_data %>% ungroup() %>% group_by(State, month) %>%
summarise(monthly_irradiance = mean(avg_ghi)) %>% arrange(monthly_irradiance)
View(map_data)
map_data = solar_data %>% ungroup() %>% group_by(State, month) %>%
summarise(monthly_irradiance = mean(avg_ghi)) %>%
%>% filter(month == 4) %>% arrange(monthly_irradiance)
map_data = solar_data %>% ungroup() %>% group_by(State, month) %>%
summarise(monthly_irradiance = mean(avg_ghi)) %>%
%>% filter(month == 4) %>% arrange(monthly_irradiance)
map_data = solar_data %>% ungroup() %>% group_by(State, month) %>%
summarise(monthly_irradiance = mean(avg_ghi)) %>%
filter(month == 4) %>% arrange(monthly_irradiance)
map_data$color = sol_colors
states_test <- geojsonio::geojson_read("json/us-states.geojson", what = "sp")
install.packages("json")
states_test <- geojsonio::geojson_read("json/us-states.geojson", what = "sp")
install.packages("geojson")
library("geojson", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
library("geojsonio", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
states_test <- geojsonio::geojson_read("json/us-states.geojson", what = "sp")
states_test <- geojsonio::geojson_read("json/us-states.geojson", what = "sp")
states_test <- geojsonio::geojson_read("json/us-states.geojson", what = "sp")
states_test <- geojsonio::geojson_read("json/us-states.geojson", what = "sp")
test2 <- rgdal::readOGR("json/us-states.geojson", "OGRGeoJSON")
states_test <- geojsonio::geojson_read("json/us-states.geojson", what = "sp")
shiny::runApp('git_proj/shiny_project_solar')
consumption = fread('consumption_v2.csv')
runApp('git_proj/shiny_project_solar')
consumption = fread('consumption_v2.csv')
View(consumption)
summary(consumption)
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
consumption[consumption$abb == 'CA', 3]
consumption[consumption$abb == 'CA', 4]
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
solar_data = fread('solar_data.csv')
state_data =
solar_data %>% ungroup() %>% filter(State == 'CA' & month == 6) %>%
group_by(time) %>% summarise(hourly_ghi = mean(avg_ghi)) %>%
mutate(panel_perf = 0.16*hourly_ghi*50) %>%
mutate(cons = multiplier*consumption[consumption$abb == 'CA', 4]) %>%
ungroup() %>% mutate(total = sum(panel_perf))  %>%
mutate(battery = 30*1000 - cons*24 + total + panel_perf)
state_data =
solar_data %>% ungroup() %>% filter(State == 'CA' & month == 6) %>%
group_by(time) %>% summarise(hourly_ghi = mean(avg_ghi)) %>%
mutate(panel_perf = 0.16*hourly_ghi*50) %>%
mutate(cons = 1*consumption[consumption$abb == 'CA', 4]) %>%
ungroup() %>% mutate(total = sum(panel_perf))  %>%
mutate(battery = 30*1000 - cons*24 + total + panel_perf)
state_data =
solar_data %>% ungroup() %>% filter(State == 'CA' & month == 6) %>%
group_by(time) %>% summarise(hourly_ghi = mean(avg_ghi)) %>%
mutate(panel_perf = 0.16*hourly_ghi*50) %>%
mutate(cons = 1*consumption[consumption$abb == 'CA', 4]) %>%
ungroup() %>% mutate(total = sum(panel_perf))  %>%
mutate(battery = (30*1000 - cons*24 + total + panel_perf) )
state_data =
solar_data %>% ungroup() %>% filter(State == 'CA' & month == 6) %>%
group_by(time) %>% summarise(hourly_ghi = mean(avg_ghi)) %>%
mutate(panel_perf = 0.16*hourly_ghi*50) %>%
mutate(cons = 1*consumption[consumption$abb == 'CA', 4]) %>%
ungroup() %>% mutate(total = sum(panel_perf))  %>%
mutate(battery = (30*1000 - cons*24 + total + panel_perf) )
state_data =
solar_data %>% ungroup() %>% filter(State == 'CA' & month == 6) %>%
group_by(time) %>% summarise(hourly_ghi = mean(avg_ghi)) %>%
mutate(panel_perf = 0.16*hourly_ghi*50) %>%
mutate(cons = 1*consumption[consumption$abb == 'CA', 4]) %>%
ungroup() %>% mutate(total = sum(panel_perf))  %>%
mutate(battery = (30*1000 - cons + total + panel_perf) )
state_data =
solar_data %>% ungroup() %>% filter(State == 'CA' & month == 6) %>%
group_by(time) %>% summarise(hourly_ghi = mean(avg_ghi)) %>%
mutate(panel_perf = 0.16*hourly_ghi*50) %>%
mutate(cons = 1*consumption[consumption$abb == 'CA', 4]) %>%
ungroup() %>% mutate(total = sum(panel_perf)) # %>%
View(state_data)
consumption[consumption$abb == 'CA', 4]
solar_test = left_join(solar_data, consumption, by = c('State' = 'abb'))
View(solar_test)
solar_test = solartest[, -c(1,7,8)]
solar_test = solar_test[, -c(1,7,8)]
colnames(solar_test)
colnames(solar_test)[7] = 'average_monthly_cons'
colnames(solar_test)
state_data =
solar_test %>% ungroup() %>% filter(State == 'CA' & month == 6) %>%
group_by(time) %>% summarise(hourly_ghi = mean(avg_ghi)) %>%
mutate(panel_perf = 0.16*hourly_ghi*50) %>%
ungroup() %>% mutate(total = sum(panel_perf)) # %>%
View(state_data)
state_data =
solar_test %>% ungroup() %>% filter(State == 'CA' & month == 6) %>%
group_by(time) %>% summarise(hourly_ghi = mean(avg_ghi)) %>%
mutate(panel_perf = 0.16*hourly_ghi*50) %>%
ungroup() %>% mutate(total = sum(panel_perf)) %>%
mutate(battery = (30*1000 - 24* average_monthly_cons + total + panel_perf) )
state_data =
solar_test %>% ungroup() %>% filter(State == 'CA' & month == 6) %>%
group_by(time) %>% summarise(hourly_ghi = mean(avg_ghi)) %>%
mutate(panel_perf = 0.16*hourly_ghi*50) %>%
ungroup() %>% mutate(total = sum(panel_perf)) %>%
mutate(battery = (30*1000 - 24* average_monthly_cons + total + panel_perf) )
colnames(solar_test)
state_data =
solar_test %>% ungroup() %>% filter(State == 'CA' & month == 6) %>%
group_by(time) %>% summarise(hourly_ghi = mean(avg_ghi)) %>%
mutate(panel_perf = 0.16*hourly_ghi*50) %>%
ungroup() %>% mutate(total = sum(panel_perf)) %>%
mutate(battery = (30*1000 - 24* average_monthly_cons + total + panel_perf) )
solar_test %>% head()
solar_test %>% ungroup() %>% filter(State == 'CA' & month == 6) %>% head()
solar_test %>% ungroup() %>% filter(State == 'CA' & month == 6) %>%
group_by(time) %>% summarise(hourly_ghi = mean(avg_ghi)) %>% head()
solar_test %>% ungroup() %>% filter(State == 'CA' & month == 6) %>%
group_by(time) %>% summarise(hourly_ghi = mean(avg_ghi)) %>%
mutate(panel_perf = 0.16*hourly_ghi*50) %>% head() %>%
head()
consumption[consumption$abb == 'CA', 4])
consumption[consumption$abb == 'CA', 4]
runApp('git_proj/shiny_project_solar')
solar_data %>% ungroup() %>% filter(State == input$state & month == input$month) %>%
group_by(time) %>% summarise(hourly_ghi = mean(avg_ghi)) %>%
mutate(panel_perf = efficiency*hourly_ghi*input$area) %>%
mutate(cons = multiplier*consumption[consumption$abb == input$state, 4]) %>% head()
solar_data %>% ungroup() %>% filter(State == 'CA' & month == 6) %>%
group_by(time) %>% summarise(hourly_ghi = mean(avg_ghi)) %>%
mutate(panel_perf = efficiency*hourly_ghi*50) %>%
mutate(cons = 1*consumption[consumption$abb == input$state, 4]) %>%
ungroup() %>% mutate(total = sum(panel_perf))  %>%
mutate(battery = 30*1000 - cons*24 + total + panel_perf)
solar_data %>% ungroup() %>% filter(State == 'CA' & month == 6) %>%
group_by(time) %>% summarise(hourly_ghi = mean(avg_ghi)) %>%
mutate(panel_perf = 0.16*hourly_ghi*50) %>%
mutate(cons = 1*consumption[consumption$abb == input$state, 4]) %>%
ungroup() %>% mutate(total = sum(panel_perf))  %>%
mutate(battery = 30*1000 - cons*24 + total + panel_perf)
solar_data %>% ungroup() %>% filter(State == 'CA' & month == 6) %>%
group_by(time) %>% summarise(hourly_ghi = mean(avg_ghi)) %>%
mutate(panel_perf = 0.16*hourly_ghi*50) %>%
mutate(cons = 1*consumption[consumption$abb == 'CA', 4]) %>%
ungroup() %>% mutate(total = sum(panel_perf))  %>%
mutate(battery = 30*1000 - cons*24 + total + panel_perf)
solar_data %>% ungroup() %>% filter(State == 'CA' & month == 6) %>%
group_by(time) %>% summarise(hourly_ghi = mean(avg_ghi)) %>%
mutate(panel_perf = 0.16*hourly_ghi*50) %>%
mutate(cons = 1*as.numeric(consumption[consumption$abb == 'CA', 4])) %>%
ungroup() %>% mutate(total = sum(panel_perf))  %>%
mutate(battery = 30*1000 - cons*24 + total + panel_perf)
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
1:24
for (i in 1:24){
print(i)
}
battery = []
battery = ()
battery = c()
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
test_data = solar_data %>% mutate(panel_perf = efficiency*avg_ghi) %>%
mutate(cons = multiplier*as.numeric(consumption[consumption$abb == State, 4]))
test_data = solar_data %>% mutate(panel_perf = 0.16*avg_ghi) %>%
mutate(cons = multiplier*as.numeric(consumption[consumption$abb == State, 4]))
test_data = solar_data %>% mutate(panel_perf = 0.16*avg_ghi) %>%
mutate(cons = 1000/(30*24)*as.numeric(consumption[consumption$abb == State, 4]))
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
solar_data %>% mutate(panel_perf = 0.16*avg_ghi) %>%
mutate(cons = 1000/(30*24)*as.numeric(consumption[consumption$abb == State, 4])) %>% head
runApp('git_proj/shiny_project_solar')
solar_data %>% mutate(panel_perf = 0.16*avg_ghi) %>%
mutate(cons = 1000/(30*24)*as.numeric(consumption[consumption$abb == 'CA', 4])) %>% head
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
test_data %>% mutate(date = as.Date(paste('2017', month, day), sep = '-'))
as.Date(paste('2017', '1', '1')
)
as.Date(paste('2017', month, day), sep = '/')
as.Date(paste('2017', 1, 1), sep = '/')
paste('2017', month, day), sep = '/'
paste('2017', month, day, sep = '/')
paste('2017', '1', '1', sep = '/')
as.Date(paste('2017', '1', '1', sep = '/'))
head(test_data)
test_data %>% mutate(date = as.Date(paste('2017', month, day, sep = '/')))
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
temp<-solar_data %>% ungroup() %>% filter(State == input$state & month == input$month) %>%
group_by(time) %>% summarise(hourly_ghi = mean(avg_ghi)) %>%
mutate(panel_perf = efficiency*hourly_ghi*input$area) %>%
mutate(cons = multiplier*as.numeric(consumption[consumption$abb == input$state, 4])) %>%
ungroup() %>% mutate(total = sum(panel_perf))  %>%
mutate(index = as.numeric(substr(time, 1,2))) %>%
mutate(charge = input$capacity*500)# %>%
temp %>%
mutate(charge = ifelse(index == 1, charge,
temp$charge[temp$index == index-1] +
panel_perf - cons))
temp<-solar_data %>% ungroup() %>% filter(State == input$state & month == input$month) %>%
group_by(time) %>% summarise(hourly_ghi = mean(avg_ghi)) %>%
mutate(panel_perf = efficiency*hourly_ghi*input$area) %>%
mutate(cons = multiplier*as.numeric(consumption[consumption$abb == input$state, 4])) %>%
ungroup() %>% mutate(total = sum(panel_perf))  %>%
mutate(index = as.numeric(substr(time, 1,2))) %>%
mutate(charge = input$capacity*500)
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
lar_data %>% mutate(panel_perf = 0.16*avg_ghi) %>%
mutate(cons = 1000/(30*24)*as.numeric(consumption[consumption$abb == 'CA', 4])) %>%
ungroup() %>% mutate(total = sum(panel_perf))  %>%
mutate(index = as.numeric(substr(time, 1,2))) %>%
mutate(charge = input$capacity*500)
solar_data %>% mutate(panel_perf = 0.16*avg_ghi) %>%
mutate(cons = 1000/(30*24)*as.numeric(consumption[consumption$abb == 'CA', 4])) %>%
ungroup() %>% mutate(total = sum(panel_perf))  %>%
mutate(index = as.numeric(substr(time, 1,2))) %>%
mutate(charge = input$capacity*500)
temp<-solar_data %>% mutate(panel_perf = 0.16*avg_ghi) %>%
mutate(cons = 1000/(30*24)*as.numeric(consumption[consumption$abb == 'CA', 4])) %>%
ungroup() %>% mutate(total = sum(panel_perf))  %>%
mutate(index = as.numeric(substr(time, 1,2))) %>%
mutate(charge = 15*500)
View(temp %>%
mutate(charge = ifelse(index == 1, charge,
temp$charge[temp$index == index-1] +
panel_perf - cons)))
View(temp %>%
mutate(charge = ifelse(index == 1, charge,
temp[temp$index == index-1]$charge +
panel_perf - cons)))
temp[temp$index == 1]$charge
temp[temp$index == 1,]$charge
temp$charge[temp$index == 1]
temp$index == 1
temp$charge[temp$index == 2]
temp$charge[temp$index == 3]
charg <- function(ind){temp$charge[temp$index == ind-1]}
temp %>%
mutate(charge = ifelse(index == 1, charge,
charg(index) +
panel_perf - cons))
charg(2)
temp<-solar_data %>% ungroup() %>% filter(State == 'CA' & month == 5) %>%
group_by(time) %>% summarise(hourly_ghi = mean(avg_ghi)) %>%
mutate(panel_perf = 0.15*hourly_ghi*50) %>%
mutate(cons = 1000/30/24*as.numeric(consumption[consumption$abb == 'CA', 4])) %>%
ungroup() %>% mutate(total = sum(panel_perf))  %>%
mutate(index = as.numeric(substr(time, 1,2))) %>%
mutate(charge = 20*500)# %>%
temp %>%
mutate(charge = ifelse(index == 1, charge,
char(index) +
panel_perf - cons))
temp %>%
mutate(charge = ifelse(index == 1, charge,
charg(index) +
panel_perf - cons))
charg <- function(ind){return(temp$charge[temp$index == ind-1])}
temp %>%
mutate(charge = ifelse(index == 1, charge,
charg(index) +
panel_perf - cons))
temp<-solar_data %>% ungroup() %>% filter(State == 'CA' & month == 5) %>%
group_by(time) %>% summarise(hourly_ghi = mean(avg_ghi)) %>%
mutate(panel_perf = 0.15*hourly_ghi*50) %>%
mutate(cons = 1000/30/24*as.numeric(consumption[consumption$abb == 'CA', 4])) %>%
ungroup() %>% mutate(total = sum(panel_perf))  %>%
mutate(index = as.numeric(substr(time, 1,2))) %>%
mutate(charge = 20*500)# %>%
charg <- function(ind){
if( ind ==1){
return(temp$charge[temp$index == 1])
}  else{
return(temp$charge[temp$index == ind-1])
}
}
charg <- function(ind){
if( ind ==1){
return(temp$charge[temp$index == 1])
}  else{
return(temp$charge[temp$index == ind-1] +
temp$panel_perf[temp$index == ind] -
temp$cons[temp$index == ind])
}
}
temp %>%
mutate(charge = charg(index))
charg(1)
charg(2)
charg(3)
charg(4)
View(temp)
charg(12)
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
system.time(blah <- fread("solar_data.csv"))
system.time(blah <- fread("consumption_v2.csv"))
runApp('git_proj/shiny_project_solar')
install.packages('ImportExport')
install.packages("ImportExport")
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
gvisHistogram(solar_map()[,'monthly_irradiance'],
options = list(colors="['orange']",
backgroundColor="#2f4f4f",
legend = '{position: "top"}',
title = 'Average Monthly Irradiance Map',
titleTextStyle="{color:'white', fontName:'Roboto', fontSize:16}",
legendTextStyle="{color:'white', fontName:'Roboto', fontSize:16}",
legendText = 'Cumulative Daily Energy')
)
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
runApp('git_proj/shiny_project_solar')
install.packages("dygraphs")
install.packages("dygraphs")
runApp('git_proj/shiny_project_solar')
